Following details are available for a bank.

Account Number, balance

Customer details : Customer id, Customer name, street, city, loan amount and deposit amount

Branch details : Branch name, Branch City, Assets

You are required to model it for mongoDB.



1. •	Choose appropriate primary key(s)
 
     CustomerId

 2.•	Create index on primary key(s)
 
    db.bank.ensureIndex({"CustomerDetails.CustomerId":1},{unique:true})
    db.bank.getIndexes()

>  db.bank.ensureIndex({"CustomerDetails.CustomerId":1},{unique:true})
{
        "createdCollectionAutomatically" : false,
        "numIndexesBefore" : 2,
        "numIndexesAfter" : 2,
        "note" : "all indexes already exist",
        "ok" : 1
}
> db.bank.getIndexes()
[
        {
                "v" : 2,
                "key" : {
                        "_id" : 1
                },
                "name" : "_id_",
                "ns" : "Aggregate.bank"
        },
        {
                "v" : 2,
                "unique" : true,
                "key" : {
                        "CustomerDetails.CustomerId" : 1
                },
                "name" : "CustomerDetails.CustomerId_1",
                "ns" : "Aggregate.bank"
        }
]
>



3.The names and cities of all borrowers. 
query-
> db.bank.find({},{"_id":0,"CustomerDetails.CustomerName":1,"CustomerDetails.City":1})
query-
{ "CustomerDetails" : { "CustomerName" : "Ramya", "City" : "Hospet" } }
{ "CustomerDetails" : { "CustomerName" : "Raisa", "City" : "Bangalore" } }
{ "CustomerDetails" : { "CustomerName" : "Rekha", "City" : "Ballari" } }
{ "CustomerDetails" : { "CustomerName" : "Ram", "City" : "Bidar" } }
{ "CustomerDetails" : { "CustomerName" : "Rajini", "City" : "Gulbarga" } }
{ "CustomerDetails" : { "CustomerName" : "Sheeba", "City" : "Mandya" } }
{ "CustomerDetails" : { "CustomerName" : "Shaalu", "City" : "Mysore" } }
{ "CustomerDetails" : { "CustomerName" : "Rahul", "City" : "Mumbai" } }
{ "CustomerDetails" : { "CustomerName" : "Razak", "City" : "Mumbai" } }
{ "CustomerDetails" : { "CustomerName" : "Asma", "City" : "Hubli" } }
>



4.•The names of borrowers who live in Chennai. 

query-
> db.bank.find({"CustomerDetails.City":"Chennai"},{"CustomerDetails.CustomerName":1})
output-
no records found



5.•Find the name, city, and assets of the branch with the largest. assets. 

query-

> db.bank.aggregate([{$group:{_id:{},total:{$max:"$BranchDetails.Assets"}}}])
output 

{ "_id" : {  }, "total" : 80000000 }

>other way

  db.Bank.find({},{"BranchDetails.BranchCity":1,"BranchDetails.BranchName":1,"BranchDetails.Assets":1}).sort({"BranchDetails.Assets":-1}).limit(1)

{ "_id" : ObjectId("5b2ce5b96d7b6629ac1b52cf"), "BranchDetails" : { "BranchName" : "Tilak Nagar", "BranchCity" : "Hubli", "Assets" : 80000000 } }



6. •The names and cities of customers who have a loan at Pune branch. 

query-
> db.bank.find({$and:[{"CustomerDetails.LoanAmount":{$ne:0}},{"BranchDetails.BranchCity":"Pune"}]},{"CustomerDetails.City":1,"CustomerDetails.CustomerName":1})

output-

{ "_id" : ObjectId("5b2ce0936d7b6629ac1b52c6"), "CustomerDetails" : { "CustomerName" : "Ramya", "City" : "Hospet" } }



7.•Find the number of accounts with balances between 700 and 900. 

query-
> db.bank.find({$and:[{Balance:{$gte:50000}},{Balance:{$lte:200000}}]}).count()

output
> 7

8.•The names of customers with both accounts and loans at Pune branch. 

query-

> db.bank.aggregate([{$match:{"BranchDetails.BranchCity":"Pune"}},{$group:{_id:{name:"$CustomerDetails.CustomerName", deposit:"$CustomerDetails.DepositAmount",loan:"$CustomerDetails.LoanAmount"}}}])

output-

{ "_id" : { "name" : "Ramya", "deposit" : 50000, "loan" : 200000 } }



9.•The customers whose total loans are greater than the total amount in their bank accounts

 db.Bank.find({$where:"this.cust_details.loan>this.balance"},{"cust_details.cname":1,"cust_details.loan":1,balance:1,})

{ "_id" : ObjectId("5b2ce0936d7b6629ac1b52c6"), "Balance" : 50000, "CustomerDetails" : { "CustomerName" : "Ramya", "LoanAmount" : 200000 } }
{ "_id" : ObjectId("5b2ce1676d7b6629ac1b52c7"), "Balance" : 50000, "CustomerDetails" : { "CustomerName" : "Raisa", "LoanAmount" : 100000 } }
{ "_id" : ObjectId("5b2ce1e36d7b6629ac1b52c8"), "Balance" : 100000, "CustomerDetails" : { "CustomerName" : "Rekha", "LoanAmount" : 400000 } }
{ "_id" : ObjectId("5b2ce3206d7b6629ac1b52ca"), "Balance" : 400000, "CustomerDetails" : { "CustomerName" : "Rajini", "LoanAmount" : 600000 } }
{ "_id" : ObjectId("5b2ce39e6d7b6629ac1b52cb"), "Balance" : 100000, "CustomerDetails" : { "CustomerName" : "Sheeba", "LoanAmount" : 200000 } }
{ "_id" : ObjectId("5b2ce4076d7b6629ac1b52cc"), "Balance" : 100000, "CustomerDetails" : { "CustomerName" : "Shaalu", "LoanAmount" : 300000 } }
>




10.•The names of customers living on streets with names ending in "Hill". 

> db.bank.find({"CustomerDetails.Street":/Hill$/},{"CustomerDetails.CustomerName":1,"_id":0})

{ "CustomerDetails" : { "CustomerName" : "Asma" } }
>


11. The names of customers with an account but not a loan at Pune branch. 
  
   
 db.bank.find({$and:[{AccountNumber:{$exists:true}},{"CustomerDetails.LoanAmount":{$exists:false},{"BranchDetails.Branchname":"Pune"}]},{"CustomerDetails.CustomerName":1})
or

db.bank.find({$and:[{AccountNumber:{$gt:0}},{"CustomerDetails.LoanAmount":0},{"BranchDetails.Branchname":"Pune"}]},{"CustomerDetails.CustomerName":1})

12.The names of branches whose assets are greater than the assets of all branches in    Hyderabad. 

db.bank.aggregate([{$


13. •	 The branch with the largest average balance. 

> db.bank.aggregate([{$group:{_id:{"$BranchDetails.BranchName"},total:{$max:{$avg:"$Balance"}}}}])
{ "_id" : {  }, "total" : 590000 }

or

> db.bank.find({},{"BranchDetails.BranchName":1,"Balance":1}).sort({"Balance":-1}).limit(1)

{ "_id" : ObjectId("5b2ce5296d7b6629ac1b52ce"), "Balance" : 590000, "BranchDetails" : { "BranchName" : "MJ Nagar" } }



14. The branch name and number of customers for each branch

> db.bank.aggregate([{$group:{_id:"$BranchDetails.BranchName",total:{$sum:1}}}])

{ "_id" : "Tilak Nagar", "total" : 1 }
{ "_id" : "BTM @nd Cross", "total" : 1 }
{ "_id" : "SBI Cumin Nagar", "total" : 1 }
{ "_id" : "MJ Nagar", "total" : 2 }
{ "_id" : "Pragathi Dam Road", "total" : 1 }
{ "_id" : "SBH KowlPet", "total" : 1 }
{ "_id" : "PNB Bus Stand Road", "total" : 1 }
{ "_id" : "SBI Chandni Chowk", "total" : 1 }
{ "_id" : "BTM Ist stage", "total" : 1 }


15.Deposit an additional Rs. 20,000 to Ram’s bank account. 

> db.bank.update({"CustomerDetails.CustomerName":"Ram"},{$inc:{"CustomerDetails.DepositAmount":20000}})

  WriteResult({ "nMatched" : 1, "nUpserted" : 0, "nModified" : 1 })